on:
  release:
    types: [created]
jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.16
      - name: Prepare
        id: prep
        run: |
          DOCKER_IMAGE=jenkinsciinfra/jv
          VERSION=${GITHUB_REF#refs/tags/}
          TAGS="${DOCKER_IMAGE}:${VERSION}"
          echo "image=${DOCKER_IMAGE}" >> $GITHUB_OUTPUT
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "tags=${TAGS}" >> $GITHUB_OUTPUT
          echo "created=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_OUTPUT
      - name: Local Branch
        run: |
          git switch -c ${{ steps.prep.outputs.version }}
      - name: Update action.yml
        run: |
          sed -i "s|image: .*|image: 'docker://${{ steps.prep.outputs.image }}:${{ steps.prep.outputs.version }}'|"  action.yml
          git diff
      - name: Update tag
        run: |
          RELEASE=$(gh api /repos/$GITHUB_REPOSITORY/releases/tags/${{ steps.prep.outputs.version }} | jq '.id')
          echo "Release ID = $RELEASE"
          git config --global user.email "${GIT_COMMITTER_EMAIL}"
          git config --global user.name "${GIT_COMMITTER_NAME}"
          git add action.yml
          git commit -m "chore: update action.yml reference to ${{ steps.prep.outputs.version }}"
          COMMIT=$(git rev-parse --short HEAD)
          echo "Current commit is ${COMMIT}"
          echo "Deleting Tag"
          git push origin :${{ steps.prep.outputs.version }}
          echo "Retagging"
          git tag -f -a ${{ steps.prep.outputs.version }} -m "${{ steps.prep.outputs.version }}" ${COMMIT}
          echo "Pushing Updating Tag"
          git push origin refs/tags/${{ steps.prep.outputs.version }}
          gh api -X PATCH -F draft=false -F sha=$COMMIT /repos/$GITHUB_REPOSITORY/releases/$RELEASE
        env:
          GIT_COMMITTER_NAME: ${{ github.actor }}
          GIT_COMMITTER_EMAIL: ${{ github.actor }}@users.noreply.github.com
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - uses: tibdex/github-app-token@b62528385c34dbc9f38e5f4225ac829252d1ea92 # v1
        id: generate-token
        with:
          app_id: ${{ secrets.JENKINS_ADMIN_APP_ID }}
          private_key: ${{ secrets.JENKINS_ADMIN_APP_PRIVKEY }}
      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@f82d6c1c344bcacabba2c841718984797f664a6b # v4.2.0
        with:
          version: latest
          args: release --rm-dist
        env:
          GITHUB_TOKEN: ${{ steps.generate-token.outputs.token }}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@e81a89b1732b9c48d79cd809d8d81d79c4647a18 # v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@f03ac48505955848960e80bbb68046aa35c7b9e7 # v2
      - name: Login to DockerHub
        uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a # v2
        with:
          username: ${{ secrets.DOCKERHUB_JENKINSCIINFRA_USERNAME }}
          password: ${{ secrets.DOCKERHUB_JENKINSCIINFRA_TOKEN }}
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@3b5e8027fcad23fda98b2e3ac259d8d67585f671 # v4
        with:
          context: .
          push: true
          tags: ${{ steps.prep.outputs.tags }}
          platforms: linux/amd64,linux/arm64,linux/s390x,linux/ppc64le
          labels: |
            org.opencontainers.image.source=${{ github.event.repository.html_url }}
            org.opencontainers.image.url=${{ github.event.repository.html_url }}
            org.opencontainers.image.created=${{ steps.prep.outputs.created }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.label-schema.vcs-url=${{ github.event.repository.html_url }}
            org.label-schema.url=${{ github.event.repository.html_url }}
            org.label-schema.vcs-ref=${{ github.sha }}
            org.label-schema.build-date=${{ steps.prep.outputs.created }}
          build-args: |
            JV_VERSION=${{ steps.prep.outputs.version }}
